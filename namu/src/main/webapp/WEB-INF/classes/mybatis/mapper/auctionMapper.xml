<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forest.namu.mapper.AuctionMapper">

<!-- 경매 시퀀스 -->
<select id="auction_seq" resultType="Long">
	select auction_seq.nextval from dual
</select>


<sql id="where-list">
	( INSTR(subject, #{kwd}) &gt; 0
	    OR  INSTR(content, #{kwd}) &gt; 0 )
</sql>


<!-- state:0 경매등록, state:1 유찰, state:2 경매취소 state:3 경매완료-삭제, 수정불가 -->

<!-- 추가 -->
<insert id="insertAuction" parameterType="com.forest.namu.domain.Auction">
	insert into auction(aNum, subject, minBid, hitCount, state, 
			salesStart, salesEnd, userId, content, imageFile, cnum, town, regDate)
		values(#{aNum}, #{subject}, #{minBid}, 0, 0, 
			TO_DATE(#{salesStart}, 'YYYY-MM-DD HH24:MI:SS'), TO_DATE(#{salesEnd}, 'YYYY-MM-DD HH24:MI:SS'), #{userId}, #{content}, #{imageFile, jdbcType=VARCHAR}, #{cnum}, #{town}, sysdate)	
</insert>

<!-- 수정 -->
<update id="updateAuction" parameterType="com.forest.namu.domain.Auction">
	update auction set cnum=#{cnum}, subject=#{subject}, content=#{content}, 
	        salesStart=TO_DATE(#{salesStart}, 'YYYY-MM-DD HH24:MI:SS'), minBid=#{minBid},
			state=#{state}, imageFile=#{imageFile, jdbcType=VARCHAR}, town=#{town}, 
			salesEnd=TO_DATE(#{salesEnd}, 'YYYY-MM-DD HH24:MI:SS')
	where aNum = #{aNum}
</update>

<!-- 삭제 -->
<delete id="deleteAuction" parameterType="com.forest.namu.domain.Auction">
	delete from auction where aNum=#{aNum}
</delete>

<!-- 리스트 -->
<select id="listAuction" parameterType="map" resultType="com.forest.namu.domain.Auction">
	select a.aNum, a.subject, a.minBid, a.state, a.content, imageFile, a.hitCount,
		TO_CHAR(a.salesStart, 'YYYY-MM-DD') salesStart, TO_CHAR(a.salesEnd, 'YYYY-MM-DD') salesEnd, 
		m.town1, nvl(likeCount, 0)likeCount, a.cnum, c.name, a.town, a.userId, nvl(b.bid,0)bid, nvl(bidCount,0) bidCount
	from auction a
	join member m on a.userId = m.userId 
	join auctioncategory c on a.cnum = c.cnum
   	left outer join (select aNum, count(*)likeCount from auctionLike group by aNum )al on a.aNum = al.aNum
   	left outer join (SELECT aNum, bid FROM (SELECT aNum, bid, ROW_NUMBER() OVER (PARTITION BY aNum ORDER BY bid DESC) rn FROM bidDetails)
   	WHERE rn = 1) b ON a.aNum = b.aNum
   	left outer join (SELECT aNum, count(*)bidCount FROM bidDetails group by aNum) bc ON a.aNum = bc.aNum
     <where>
		<if test="kwd != null and kwd != '' ">
			<include refid="where-list"/>
		</if>
		<if test="cnum != 0">
			AND a.cnum = #{cnum}
		</if>
		<if test="town != null and town != ''">
			AND a.town = #{town}
		</if>		
	</where>   
	order by aNum desc
	OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY	
</select>

<!-- 게시글 수 -->
<select id="dataCount" parameterType="map" resultType="Integer">
select nvl(count(*),0)
	from auction a
	<where>
		<if test="kwd != null and kwd != '' ">
			<include refid="where-list"/>
		</if>
		<if test="cnum != 0">
			AND a.cnum = #{cnum}
		</if>
		<if test="town != null and town != ''">
			AND a.town = #{town}
		</if>		
	</where>
</select>

<select id="listCategory" resultType="com.forest.namu.domain.Auction">
  select cNum, name from auctioncategory 
</select>

<!-- 조회수 -->
<select id="updateHitCount" parameterType="Long">
	update auction set hitCount = hitCount+1 where aNum = #{aNum}
</select>

<!-- 글보기 -->
<select id="findById" parameterType="Long" resultType="com.forest.namu.domain.Auction">
	SELECT a.aNum, a.content, a.imageFile, a.subject, a.minBid, a.state, a.hitCount, a.cnum,
       TO_CHAR(a.salesStart,'YYYY-MM-DD HH24:MI') salesStart, 
       TO_CHAR(a.salesEnd,'YYYY-MM-DD HH24:MI') salesEnd, 
       m.nickName, m.town1, a.userId, m.nickName, a.town, a.tableName, a.soldId, nvl(bc.bid,0) bid
	FROM auction a 
	LEFT OUTER JOIN ( SELECT aNum, COUNT(*) FROM auctionlike GROUP BY aNum ) al ON a.aNum = al.aNum
	JOIN member m ON a.userId = m.userId 
	LEFT OUTER JOIN ( SELECT aNum, bid FROM ( SELECT aNum, bid, ROW_NUMBER() OVER (PARTITION BY aNum ORDER BY bid DESC) as rn
        FROM bidDetails ) WHERE rn = 1) bc ON a.aNum = bc.aNum
	where a.aNum = #{a.aNum}
</select>

<!-- 찜 수 -->
<select id="likeCount" parameterType="map" resultType="Integer">
	select count(*)
	from auctionLike
	where aNum = #{aNum} and userId = #{userId}
</select>

<!-- 찜 추가 -->
<insert id="insertAuctionLike" parameterType="map">
	insert into auctionLike(aNum, userId) values(#{aNum}, #{userId})
</insert>

<!-- 찜 삭제 -->
<delete id="deleteAuctionLike" parameterType="map">
	delete from auctionLike 
	where aNum = #{aNum} and userId = #{userId}
</delete>

<!-- 다중 파일 추가 -->
<insert id="insertAuctionFile" parameterType="com.forest.namu.domain.Auction">
	insert into auctionFile(filenum, aNum, uploadFile) values(auctionFile_seq.nextval, #{aNum}, #{uploadFile})
</insert>

<!-- 다중 파일 삭제 -->
<delete id="deleteAuctionFile" parameterType="Long">
	delete from auctionFile where fileNum = #{fileNum}
</delete>

<!-- 파일 리스트 -->
<select id="listAuctionFile" resultType="com.forest.namu.domain.Auction" parameterType="Long">
	select fileNum, aNum, uploadFile
	from auctionFile 
	where aNum = #{aNum}
</select>

<!-- 다중 파일 보기 -->
<select id="findByFileId" resultType="com.forest.namu.domain.Auction" parameterType="Long">
	select fileNum, aNum, uploadFile
	from auctionFile
	where fileNum = #{fileNum}
</select>

<!-- 입찰하기 -->
<insert id="insertBid" parameterType="map">
	insert into bidDetails(bidNum, bid, bidDate, aNum, userId, apply) 
		values(bidDetails_seq.nextval, #{bid}, sysdate, #{aNum}, #{userId}, 0)
</insert>

<!-- 유저별 경매 참여 금액 -->
<select id="listBid" parameterType="map" resultType="com.forest.namu.domain.Auction">
	SELECT * FROM (
		SELECT bidNum, bid, bidDate, aNum, userId, apply,
	    	RANK() OVER(PARTITION BY userId  ORDER BY bid DESC) rank
		FROM bidDetails
		WHERE aNum = #{aNum}
	)
	WHERE rank = 1
</select>

<!-- 경매 입찰 최고가 -->
<select id="findByMaxBid" parameterType="map" resultType="com.forest.namu.domain.Auction">
	SELECT bidNum, b.bid, bidDate, b.aNum, b.userId, apply, m.nickName, a.subject
	FROM bidDetails b
	JOIN member m ON b.userId = m.userId
	join auction a on b.anum = a.aNum
	WHERE b.aNum = #{aNum}
	ORDER BY b.bid DESC
	FETCH FIRST 1 ROWS ONLY
</select>

<!-- 유저의 마지막 경매 내역 -->
<select id="findByUserBid" parameterType="map" resultType="com.forest.namu.domain.Auction">
	SELECT bidNum, bid, bidDate, aNum, userId, apply
	FROM bidDetails
	WHERE aNum = #{aNum} AND userId = #{userId}
	ORDER BY bid DESC
	FETCH FIRST 1 ROWS ONLY
</select>

<!-- state:0 경매등록, state:1 경매종료(기간), state:2 경매취소 state:3 경매완료-->
<update id="updateAuctionState" parameterType="map">
	UPDATE auction SET state = #{state}, soldId = #{soldId}
	WHERE aNum = #{aNum}
</update>

<update id="updateBiddetailsApply" parameterType="map">
	UPDATE biddetails SET apply = #{apply}
	WHERE bidNum = #{bidNum}
</update>

<update id="updateEndState">
	UPDATE auction SET state = 1
	WHERE salesEnd &lt;= SYSDATE
</update>

</mapper>