<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forest.namu.mapper.RentCRMapper">

	<select id="getEmailByRentNum" parameterType="Long" resultType="map">
		SELECT md.email, r.subject
		FROM rent r
		JOIN memberDetail md ON r.userId = md.userId
		WHERE r.rentNum = #{rentNum}
	</select>

	<select id="getEmailByReqNum" parameterType="Long" resultType="map">
		SELECT md.email, r.subject
		FROM rentConfirm rc
		JOIN memberDetail md ON rc.userId = md.userId
		JOIN rent r ON rc.rentNum = r.rentNum
		WHERE rc.reqNum = #{reqNum}
	</select>
	
    <!-- 1: 대기중, 2: 수락 상태만 체크 -->
    <select id="checkRentOverlap" parameterType="map" resultType="int">
	    <![CDATA[
		    SELECT COUNT(*) FROM rentConfirm
		    WHERE rentNum = #{rentNum}
			    AND ((strDate BETWEEN TO_DATE(#{strDate}, 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{endDate}, 'YYYY-MM-DD HH24:MI:SS'))
			    OR (endDate BETWEEN TO_DATE(#{strDate}, 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{endDate}, 'YYYY-MM-DD HH24:MI:SS'))
			    OR (strDate <= TO_DATE(#{strDate}, 'YYYY-MM-DD HH24:MI:SS') AND endDate >= TO_DATE(#{endDate}, 'YYYY-MM-DD HH24:MI:SS')))
			    AND state IN (1, 2)
	    ]]>
    </select>
    
	<select id="rentConfirmSeq" resultType="Long">
		SELECT rentConfirm_seq.NEXTVAL FROM dual
	</select>

	<insert id="insertRentConfirm" parameterType="com.forest.namu.domain.RentCR">
        INSERT INTO rentConfirm (
            reqNum, rentNum, userId, reqDate, strDate, endDate, 
            agree, deposit, state, totalPrice
        ) VALUES (
            #{reqNum}, #{rentNum}, #{userId}, SYSDATE, 
            TO_DATE(#{strDate}, 'YYYY-MM-DD"T"HH24:MI'), 
            TO_DATE(#{endDate}, 'YYYY-MM-DD"T"HH24:MI'), 
            #{agree}, #{deposit}, #{state}, #{totalPrice}
        )
    </insert>
    
    <select id="getDeposit" parameterType="map" resultType="Long">
    	SELECT deposit
    	FROM rentConfirm
    	WHERE userId = #{userId} AND rentNum = #{rentNum}
    	ORDER BY reqNum DESC
    	FETCH FIRST 1 ROWS ONLY
    </select>
    
    <select id="getPoint" parameterType="Long" resultType="com.forest.namu.domain.Point">
	    SELECT p.userId, r.deposit as pointVar, p.lastMoney as currentPoint
	    FROM rentConfirm r
	    JOIN point p ON r.userId = p.userId
	    WHERE r.reqNum = #{reqNum}
	    ORDER BY pointNum DESC
	    FETCH FIRST 1 ROWS ONLY
    </select>
    
    <insert id="depositProcess" parameterType="com.forest.namu.domain.Point">
		INSERT INTO point
			(pointNum, userId, description, regDate, currentPoint, pointVar, pointCate, lastMoney)
		VALUES
			(point_seq.nextval, #{userId}, #{description}, SYSDATE, #{currentPoint}, #{pointVar}, #{pointCate}, #{lastMoney})
	</insert>
	
	<select id="selectRentReviewCount" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM rentreview r
        JOIN rentconfirm rc ON r.reqnum = rc.reqnum
        WHERE rc.rentnum = #{rentNum}
    </select>
	
    <select id="selectRentReviews" resultType="map">
	    SELECT r.rentreviewnum, r.content, r.wasgood, r.reqnum, 
	           m.nickname, rc.userid
	    FROM rentreview r
	    JOIN rentconfirm rc ON r.reqnum = rc.reqnum
	    JOIN member m ON rc.userid = m.userid
	    WHERE rc.rentnum = #{rentNum}
	    ORDER BY r.rentreviewnum DESC
	    OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
    </select>
    
	<insert id="insertUserReview" parameterType="map">
        INSERT INTO userReview (
            key, identify, userId2, userId1, content,
            good1, good2, good3, soso1, soso2, soso3, bad1, bad2, bad3
        ) VALUES (
            userReview_seq.NextVal, 'rent',  #{userId}, #{targetUserId}, #{content},
            #{good1}, #{good2}, #{good3}, #{soso1}, #{soso2}, #{soso3}, #{bad1}, #{bad2}, #{bad3}
        )
    </insert>
    
    <update id="updateUserReviewed" parameterType="map">
    	UPDATE rentConfirm SET userReview = 1
    	where reqNum = #{reqNum}
    </update>
    
    <update id="updateRentReviewed" parameterType="map">
    	UPDATE rentConfirm SET rentReview = 1
    	where reqNum = #{reqNum}
    </update>
    
    <update id="updateBorrowerReviewed" parameterType="map">
    	UPDATE rentConfirm SET borrowerReview = 1
    	where reqNum = #{reqNum}
    </update>

    <insert id="insertRentReview" parameterType="map">
        INSERT INTO rentReview (
            rentReviewNum, content, wasGood, reqNum
        ) VALUES (
            rentReview_seq.NextVal, #{content}, #{wasGood}, #{reqNum}
        )
    </insert>

    <update id="updateUserManner" parameterType="map">
        UPDATE memberDetail
        SET userManner = userManner + #{mannerChange}
        WHERE userId = #{userId}
    </update>
	
    <update id="cancelRent" parameterType="map">
        UPDATE rentConfirm
        SET state = 4  <!-- 4: 취소 상태 -->
        WHERE rentNum = #{rentNum} AND userId = #{userId} AND state = 1  <!-- 1: 대기중 상태만 취소 가능 -->
    </update>
    
    <select id="findByReqNum" parameterType="Long" resultType="com.forest.namu.domain.RentCR">
        SELECT * FROM rentConfirm WHERE reqNum = #{reqNum}
    </select>
    
    <select id="findByRentNum" parameterType="map" resultType="com.forest.namu.domain.RentCR">
    	SELECT *
    	FROM rentConfirm
    	WHERE userId = #{userId} AND rentNum = #{rentNum}
    	ORDER BY reqNum DESC
    	FETCH FIRST 1 ROWS ONLY
    </select>
    
    <update id="updateRentCRState" parameterType="map">
        UPDATE rentConfirm SET
        state = #{state}, reject = #{reject, jdbcType = VARCHAR}
        WHERE reqNum = #{reqNum}
    </update>
    
    <select id="checkState" parameterType="map" resultType="com.forest.namu.domain.RentCR">
    	SELECT state, strDate, endDate, totalPrice
    	FROM rentConfirm
    	WHERE rentNum = #{num} AND userId = #{userId} AND state IN (1, 2)
    </select>
    
    <select id="getUnreadMessageCount" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM chatMessage
	    WHERE roomName = 'rent-${rentNum}'
	    AND toIdx = #{userId}
	    AND readIdx IS NULL
	</select>
	
	<select id="selectMyApplications" parameterType="String" resultType="com.forest.namu.domain.RentCR">
	    SELECT rc.reqNum, rc.rentNum, borrow.nickName AS borrowName, rent.nickName AS rentName, r.userId AS rentId,
	           r.subject, rc.reqDate, rc.strDate, rc.endDate, rc.state, deposit, totalPrice, reject, 
	           rc.userReview, rc.rentReview, rc.borrowerReview,
	           CASE WHEN cm.num IS NOT NULL THEN 1 ELSE 0 END AS hasUnreadMessages
	    FROM rentConfirm rc
	    JOIN rent r ON rc.rentNum = r.rentNum
	    JOIN member borrow ON rc.userId = borrow.userId
	    JOIN member rent ON r.userId = rent.userId
	    LEFT JOIN chatMessage cm ON cm.roomName = CONCAT('rent-', rc.rentNum)
	                             AND cm.toIdx = #{userId}
	                             AND cm.readIdx IS NULL
	                             AND cm.fromIdx != #{userId}
	                             AND cm.sendDate = (
	                                 SELECT MAX(sendDate)
	                                 FROM chatMessage
	                                 WHERE roomName = cm.roomName AND fromIdx != #{userId}
	                             )
	    WHERE rc.userId = #{userId}
	    ORDER BY rc.reqDate DESC
    </select>

    <select id="selectReceivedRequests" parameterType="String" resultType="com.forest.namu.domain.RentCR">
	    SELECT rc.reqNum, rc.rentNum, borrow.nickName AS borrowName, rent.nickName AS rentName, rc.userId AS rentId,
	           r.subject, rc.reqDate, rc.strDate, rc.endDate, rc.state, deposit, totalPrice, reject, 
	           rc.userReview, rc.rentReview, rc.borrowerReview,
	           CASE WHEN cm.num IS NOT NULL THEN 1 ELSE 0 END AS hasUnreadMessages
	    FROM rentConfirm rc
	    JOIN rent r ON rc.rentNum = r.rentNum
	    JOIN member borrow ON rc.userId = borrow.userId
	    JOIN member rent ON r.userId = rent.userId
	    LEFT JOIN chatMessage cm ON cm.roomName = CONCAT('rent-', rc.rentNum)
	                             AND cm.toIdx = #{userId}
	                             AND cm.readIdx IS NULL
	                             AND cm.fromIdx != #{userId}
	                             AND cm.sendDate = (
	                                 SELECT MAX(sendDate)
	                                 FROM chatMessage
	                                 WHERE roomName = cm.roomName AND fromIdx != #{userId}
	                             )
	    WHERE r.userId = #{userId}
	    ORDER BY rc.reqDate DESC
    </select>
	
</mapper>