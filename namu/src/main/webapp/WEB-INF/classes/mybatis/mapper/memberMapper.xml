<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forest.namu.mapper.MemberMapper">
	<select id="loginMember" parameterType="String" resultType="com.forest.namu.domain.Member">
		SELECT memberIdx, membership, userId, nickName, userPwd, regDate, modifyDate, lastLogin
		FROM member
		WHERE userId = #{userId} AND enabled != 0
	</select>
	
	<update id="updateLastLogin" parameterType="String">
		UPDATE member SET lastLogin = SYSDATE, loginFail = 0
		WHERE userId=#{userId}
	</update>
	
    <select id="memberSeq" resultType="Long">
       SELECT member_seq.NEXTVAL FROM dual 
    </select>

    <insert id="insertmember" parameterType="com.forest.namu.domain.Member">
		INSERT INTO member(memberIdx, userId, nickName, userPwd, regDate, modifyDate, secessionDate, loginFail, post, town1, addr, town2, enabled, membership)
		VALUES (member_seq.NEXTVAL, #{userId}, #{nickName}, #{userPwd}, SYSDATE, SYSDATE, SYSDATE, 0,
			#{post, jdbcType=VARCHAR}, #{town1}, #{addr, jdbcType=VARCHAR}, #{town2, jdbcType=VARCHAR}, 1, 10) 
    </insert>

    <insert id="insertMemberDetail" parameterType="com.forest.namu.domain.Member">
		INSERT INTO memberDetail(userId, userName, birth, email, ment, userManner, tel)
		VALUES (#{userId}, #{userName}, #{birth}, #{email, jdbcType=VARCHAR}, #{ment, jdbcType=VARCHAR}, 200, #{tel})
    </insert>

    <update id="insertMember12" parameterType="com.forest.namu.domain.Member">
		INSERT ALL
		INTO member(memberIdx, userId, nickName, userPwd, regDate, modifyDate, secessionDate, loginFail, post, town1, addr, town2, enabled, membership)
		VALUES (member_seq.NEXTVAL, #{userId}, #{nickName}, #{userPwd}, SYSDATE, SYSDATE, SYSDATE, 0, 
			#{post, jdbcType=VARCHAR}, #{town1}, #{addr, jdbcType=VARCHAR}, #{town2, jdbcType=VARCHAR}, 1, 10)
		INTO memberDetail(userId, userName, birth, email, ment, userManner, tel)
		VALUES (#{userId},#{userName}, #{birth}, #{email,  jdbcType=VARCHAR}, #{ment, jdbcType=VARCHAR}, 200, #{tel})
		SELECT * FROM dual     
    </update>
	
	<select id="findById" parameterType="String" resultType="com.forest.namu.domain.Member">
		SELECT memberIdx,userId, nickName,userPwd,regDate, modifyDate, loginFail, lastLogin, post, town1, addr, town2, enabled, membership
		FROM member
		WHERE userId = #{userId}
	</select>
	
	<select id="findByNickName" parameterType="String" resultType="com.forest.namu.domain.Member">
		SELECT memberIdx,userId, nickName,userPwd,regDate, modifyDate, loginFail, lastLogin, post, town1, addr, town2, enabled, membership
		FROM member
		WHERE nickName = #{nickName}
	</select>

	<select id="findByMemberIdx" parameterType="Long" resultType="com.forest.namu.domain.Member">
		SELECT m.memberIdx, membership, enabled, 
			NVL(m.userId, 'guest') userId, NVL(userName, '손님') userName, userPwd, 
			regDate, modifyDate, lastLogin,
			TO_CHAR(birth, 'YYYY-MM-DD') birth, email, tel,
			post, town1, addr2, town2
		FROM member m
		LEFT OUTER JOIN memberDetail m2 ON m.userId = m2.userId
		WHERE m.memberIdx = #{memberIdx}
	</select>
	
    <!-- 회원정보 수정  --> 
    <update id="updateMembership" parameterType="map">
		UPDATE member SET membership = #{membership}
		WHERE memberIdx=#{memberIdx}
    </update>

    <update id="updateMemberEnabled" parameterType="map">
		UPDATE member SET enabled=#{enabled} WHERE userId=#{userId}
    </update>
    
    <update id="updateMember" parameterType="com.forest.namu.domain.Member">
		UPDATE member SET userPwd=#{userPwd}, modifyDate=SYSDATE,
			post=#{post}, town1=#{town1}, addr=#{addr}, town2=#{town2, jdbcType=VARCHAR}
		WHERE userId=#{userId}
    </update>
	
    <update id="updateMemberDetail" parameterType="com.forest.namu.domain.Member">
		UPDATE memberDetail SET email=#{email, jdbcType=VARCHAR}, 
			birth=#{birth, jdbcType=VARCHAR}, ment=#{ment,jdbcType=VARCHAR},tel=#{tel, jdbcType=VARCHAR} 
		WHERE userId=#{userId}
    </update>

    <!-- member 테이블 정보 삭제  -->    
    <delete id="deleteMember" parameterType="map">
		DELETE FROM member WHERE userId=#{userId}
    </delete>
    
    <delete id="deleteMemberDetail" parameterType="map">
		DELETE FROM memberDetail WHERE userId=#{userId}
    </delete>
	
	<!-- 패스워드 실패 / 회원 상태 -->
	
	<select id="checkFailureCount" parameterType="String" resultType="Integer">
		SELECT NVL(loginFail, 0) loginFail
		FROM member
		WHERE userId = #{userId}
	</select>
	
	<update id="updateFailureCountReset" parameterType="String">
		UPDATE member SET loginFail = 0
		WHERE userId = #{userId}
	</update>
	
	<update id="updateFailureCount" parameterType="String">
		UPDATE member SET loginFail = loginFail + 1
		WHERE userId = #{userId}
	</update>


	<insert id="insertMemberState" parameterType="com.forest.namu.domain.Member">
		INSERT INTO memberState(stateNum, userId, reportNum, startDate, endDate, reason, stateCode)
		VALUES (#{stateNum}, #{userId}, #{reportNum, jdbcType=INTEGER}, SYSDATE, SYSDATE, SYSDATE, #{reason}, #{stateCode})
	</insert>
	
	<!-- 권한 테이블 -->
	<insert id="insertAuthority" parameterType="com.forest.namu.domain.Member">
		INSERT INTO memberAuthority(authority, userId)
		VALUES (#{authority}, #{userId})
	</insert>

	<update id="updateAuthority" parameterType="com.forest.namu.domain.Member">
		UPDATE memberAuthority SET authority = #{authority} WHERE userId = #{userId}
	</update>	
</mapper>