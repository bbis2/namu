<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forest.namu.mapper.TogetherBoardMapper">
	
	<!-- 등록 -->
	<insert id="insertTogetherBoard" parameterType="com.forest.namu.domain.TogetherBoard">
		INSERT INTO freeBoard(num, tNum, userId, content, regDate, hitCount)
		VALUES(freeBoard_seq.NEXTVAL, #{tNum}, #{userId},#{content},SYSDATE,0)
	</insert>
	
	<!-- 파일등록 -->
	<insert id="insertTogetherBoardFile" parameterType="com.forest.namu.domain.TogetherBoard">
		INSERT INTO freeBoardFile(fileNum, num, filename)
			VALUES(freeBoardFile_seq.NEXTVAL, freeBoard_seq.CURRVAL, #{filename})	
	</insert>
	
	<!-- 개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM freeBoard f
		JOIN member m ON f.userId = m.userId
		WHERE tNum = #{tNum}
	</select>
	
	<!-- 리스트 -->
	<select id="listTogetherBoard" parameterType="map" resultType="com.forest.namu.domain.TogetherBoard">
	    SELECT b.num, b.tNum, b.userId, m.nickName, b.content, b.hitCount, TO_CHAR(b.regDate, 'YYYY-MM-DD') regDate, filename
	    FROM freeboard b
	    JOIN togetherList l ON b.tNum = l.tNum
	    JOIN member m ON b.userId = m.userId
	    LEFT OUTER JOIN togetherApply a ON b.userId = a.userId
	    LEFT OUTER JOIN (
	        SELECT num, COUNT(*) rNum FROM freeBoardReply GROUP BY num
	    ) c ON b.num = c.num
	    LEFT OUTER JOIN (
	        SELECT num, LISTAGG(filename, ',') WITHIN GROUP (ORDER BY fileNum) filename
	        FROM freeboardFile 
	        GROUP BY num
	    ) f ON b.num = f.num
	    WHERE b.tNum = #{tNum}
	    ORDER BY b.num DESC
	    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="findById" parameterType="Long" resultType="com.forest.namu.domain.TogetherBoard">
	    SELECT b.num, b.tNum, b.userId, m.nickName, b.content, b.hitCount, TO_CHAR(b.regDate, 'YYYY-MM-DD') regDate
	    FROM freeboard b
	    JOIN togetherList l ON b.tNum = l.tNum
	    JOIN member m ON b.userId = m.userId
	    LEFT OUTER JOIN togetherApply a ON b.userId = a.userId
	    WHERE b.num = #{num}
	    
	</select>
	
	<!--수정 -->
	<update id="updateTogetherBoard" parameterType="com.forest.namu.domain.TogetherBoard">
		UPDATE freeBoard SET content= #{content}
		WHERE num = #{num}	
	</update>
	
	<!-- 파일 삭제 -->
	<delete id="">
		DELETE FROM freeBoardFile WHERE fileNum = #{fileNum}
	</delete>
	
	<!-- 삭제 -->
	<delete id="deleteTogetherBoard" parameterType="long">
		DELETE FROM freeBoard
		WHERE num = #{num}	
	</delete>
		
	<!-- #파일 리스트 -->
	<select id="listTogetherBoardFile" parameterType="Long" resultType="com.forest.namu.domain.TogetherBoard" >
		SELECT  fileNum, num, fileName
		FROM freeBoardFile 
		WHERE num = #{num}
	</select>
	
	<select id="findByFileId" parameterType="Long" resultType="com.forest.namu.domain.TogetherBoard">
		SELECT fileNum, num, fileName
		FROM freeBoardFile
		WHERE fileNum = #{fileNum}
	</select>
	
	<!--댓글-->
	<insert id="insertReply" parameterType="com.forest.namu.domain.BoardReply">
		INSERT INTO freeBoardReply(rNum, num, userId, content, answer, regDate)
		VALUES (freeBoardReply_seq.NEXTVAL, #{num}, #{userId}, #{content}, #{answer}, SYSDATE)
	</insert>
	
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM freeBoardReply
		WHERE num=#{num}
	</select>
	
	<delete id="deleteReply" parameterType="map">
		DELETE FROM freeBoardReply
		WHERE rNum =#{rNum}
		<if test="mode=='reply'">
			OR answer =#{rNum}
		</if>
	</delete>
	
	<select id="listReply" parameterType="map" resultType="com.forest.namu.domain.BoardReply">
	    SELECT r.rNum, r.userId, nickName, r.num, r.content, r.regDate,
	        NVL(answerCount, 0) answerCount,
	        NVL(likeCount, 0) likeCount,
	        NVL(disLikeCount, 0) disLikeCount
	    FROM freeBoardReply r 
	    JOIN member m ON r.userId = m.userId
	    LEFT OUTER JOIN (
	        SELECT answer, COUNT(*) answerCount
	        FROM freeBoardReply
	        GROUP BY answer
	    ) a ON r.rNum = a.answer
	    LEFT OUTER JOIN (
	        SELECT rNum, 
	               COUNT(DECODE(replyLike, 1, 1)) likeCount,
	               COUNT(DECODE(replyLike, 0, 1)) disLikeCount
	        FROM freeBoardReplyLike
	        GROUP BY rNum
	    ) c ON r.rNum = c.rNum
	    WHERE r.num=#{num}
	    ORDER BY r.rNum DESC
	    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

	<!-- 댓글의 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="map" resultType="com.forest.namu.domain.BoardReply">
		SELECT rNum, num, r.userId, nickName, r.content, r.regDate, answer
		FROM freeBoardReply r
		JOIN member m ON r.userId = m.userId
		ORDER BY rNUM DESC
	</select>
	
	<!-- 좋아요/ 싫어요 -->
	<select id="replyAnswerCount" parameterType="map" resultType="Integer">
	    SELECT NVL(COUNT(*), 0)
	    FROM freeBoardReply
	</select>
	
	<!-- 좋아요/ 싫어요 등록 -->
	<insert id="insertReplyLike" parameterType="map">
		INSERT INTO freeBoardReplyLike(rNum, userId, replyLike)
		VALUES (#{rNum}, #{userId}, #{replyLike})
	</insert>
	
	<!-- 좋아요/ 싫어요 카운드 -->
	<select id="replyLikeCount" parameterType="map" resultType="map">
		SELECT COUNT(DECODE(replyLike, 1, 1)) likeCount,
				COUNT(DECODE(replyLike, 0, 1)) disLikeCount
		FROM freeBoardReplyLike WHERE rNum = #{rNum}
	</select>	
	
	<delete id="deleteBoard" parameterType="map">
		DELETE FROM freeBoard
		WHERE num=#{num}
	</delete>
	
	<!-- # -->
	
	<!-- 좋아요 등록 -->
	<insert id="insertFreeBoardLike" parameterType="map">
		INSERT INTO freeBoardLike(num, userId) VALUES (#{num}, #{userId})
	</insert>
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deleteFreeBoardLike" parameterType="map">
		DELETE FROM freeBoardLike WHERE num = #{num} AND userId = #{userId}
	</delete>
	
	<!-- 게시글 좋아요 개수 -->
	<select id="FreeBoardLikeCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM freeBoardLike WHERE num =#{num}
	</select>
	
	<!-- 게시글 좋아요 여부 -->
	<select id="userFreeBoardLiked" parameterType="map" resultType="com.forest.namu.domain.TogetherBoard">
		SELECT num, userId FROM freeBoardLike WHERE num = #{num} AND userId = #{userId}
	</select>

	
</mapper>