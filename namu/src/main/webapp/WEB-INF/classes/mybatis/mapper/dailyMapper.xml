<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forest.namu.mapper.DailyMapper">

	<insert id="insertDaily" parameterType="com.forest.namu.domain.Daily">
		INSERT INTO daily (num, userId, categoryNum, subject, content, regDate, hitCount, notice, town)
		VALUES (daily_seq.NEXTVAL, #{userId},#{categoryNum}, #{subject}, #{content}, SYSDATE, 0, 0, #{town})
	</insert>
	
	<sql id="where-list">
	    <choose>
	        <when test="schType == 'all' ">
	            ( INSTR(subject, #{kwd}) &gt; 0
	            OR DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 
	            OR INSTR(nickName, #{kwd}) &gt; 0 )
	        </when>
	        <when test="schType == 'regDate' ">
	            ( TO_CHAR(regDate, 'YYYYMMDD') = #{kwd}
	            OR TO_CHAR(regDate, 'YYYY-MM-DD') = #{kwd} )
	        </when>
	        <when test="schType == 'nickName'">
	            INSTR(nickName, #{kwd}) &gt; 0
	        </when>
	        <when test="schType == 'content'">
	            DBMS_LOB.INSTR(content, #{kwd}) &gt; 0
	        </when>
	        <otherwise>
	            INSTR(${schType}, #{kwd}) &gt; 0
	        </otherwise>
	    </choose>
	</sql>

	<!-- 글개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM daily d
		JOIN member  m ON  d.userId = m.userId
		<where>
		    <if test="kwd != null and kwd != ''">
		        <include refid="where-list"/>
		    </if>
		    <if test="categoryNum != 0">
		        AND categoryNum = #{categoryNum}
		    </if>
		    <if test="town != null and town != ''">
		        AND town = #{town}
		    </if> 		     
		</where>
	</select>
	
	<!-- 글리스트 -->
	<select id="listDaily" parameterType="map" resultType="com.forest.namu.domain.Daily">
		SELECT d.num, d.userId, m.nickName, t.categoryNum, t.categoryName , d.subject, TO_CHAR(d.regDate, 'YYYY-MM-DD') regDate,
			hitCount, town
		FROM daily d
		JOIN member m ON d.userId=m.userId
		JOIN dailyCategory t ON d.categoryNum = t.categoryNum
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) rNum FROM dailyReply
			WHERE answer = 0 AND showReply=1
			GROUP BY num
		)c ON d.num = c.num
	<where>
	    <if test="kwd != null and kwd != ''">
	        <include refid="where-list"/>
	    </if>
	    <if test="categoryNum != 0">
	        AND d.categoryNum = #{categoryNum}
	    </if> 
	    <if test="town != null and town != ''">
	        AND town = #{town}
	    </if> 			    
	</where>
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="findById" parameterType="Long" resultType="com.forest.namu.domain.Daily">
		SELECT d.num, d.userId, m.nickName, subject, d.categoryNum, categoryName , content, hitCount, TO_CHAR(d.regDate, 'YYYY-MM-DD') regDate,
		 NVL(dailyLikeCount, 0) dailyLikeCount
		FROM daily d
		JOIN member m On d.userId = m.userId
		JOIN dailyCategory t ON d.categoryNum = t.categoryNum
		LEFT OUTER JOIN (
			SELECT num, COUNT(*) dailyLikeCount FROM dailyLike
			GROUP BY num
		) c ON d.num = c.num
		WHERE d.num = #{num}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Long">
		UPDATE  daily SET hitCount  = hitCount+1 WHERE num = #{num}
	</update>
	
	<!-- 이전글 -->
	<select id="findByPrev" parameterType="map" resultType="com.forest.namu.domain.Daily">
		SELECT num, subject
		FROM daily d
		JOIN member m ON  d.userId = m.userId
		JOIN dailyCategory t ON d.categoryNum = t.categoryNum
	<where>
	    <if test="kwd != null and kwd != ''">
	        <include refid="where-list"/>
	    </if>
	    <if test="town != null and town != ''">
	        AND town = #{town}
	    </if> 			    
	    AND (num &gt; #{num})
	</where>
	ORDER BY num ASC
	FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 다음글 -->
	<select id="findByNext" parameterType="map" resultType="com.forest.namu.domain.Daily">
		SELECT num, subject
		FROM daily d
		JOIN member m ON d.userId=m.userId
		JOIN dailyCategory t ON d.categoryNum = t.categoryNum
	<where>
	    <if test="kwd != null and kwd != ''">
	        <include refid="where-list"/>
	    </if>
	    <if test="town != null and town != ''">
	        AND town = #{town}
	    </if> 	    
	    AND (num &lt; #{num})
	</where>
	ORDER BY num DESC
	FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 수정 -->
	<update id="updateDaily" parameterType="com.forest.namu.domain.Daily">
		UPDATE daily SET categoryNum=#{categoryNum}, subject=#{subject}, content=#{content} ,town = #{town})
		WHERE num =#{num}
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteDaily" parameterType="Long">
		DELETE FROM daily WHERE num = #{num}
	</delete>
	
	<!-- 카테고리 -->
	<insert id="insertCategory" parameterType="com.forest.namu.domain.Daily">
		INSERT INTO dailyCategory(categoryNum, categoryName)
		VAlUES (dailyCategory_seq.NextVAL, #{categoryName})
	</insert>

	<select id="listDailyCategory" resultType="com.forest.namu.domain.Daily">
		SELECT categoryNum, categoryName
		FROM dailyCategory
		ORDER BY categoryNum
	</select>	
	
	<select id="findByCategory" parameterType="Long" resultType="com.forest.namu.domain.Daily">
		SELECT categoryNum, categoryName
		FROM dailyCategory 
		WHERE categoryNum = #{categoryNum}
	</select>	
	
	
	<!-- 게시글 좋아요/싫어요 -->
	
	<!-- 게시글 좋아요 등록 -->
	<insert id="insertDailyLike" parameterType="map">
		INSERT INTO dailyLike(num, userId) VALUES (#{num}, #{userId})
	</insert>
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="deleteDailyLike" parameterType="map">
		DELETE FROM dailyLike WHERE num = #{num} AND userId = #{userId}
	</delete>
	
	<!-- 게시글 좋아요 개수 -->
	<select id="dailyLikeCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*) FROM dailyLike WHERE num =#{num}
	</select>
	
	<!-- 게시글 좋아요 여부 -->
	<select id="userDailyLiked" parameterType="map" resultType="com.forest.namu.domain.Daily">
		SELECT num, userId FROM dailyLike WHERE num = #{num} AND userId = #{userId}
	</select>
	
	<!--댓글-->
	<insert id="insertReply" parameterType="com.forest.namu.domain.Reply">
		INSERT INTO dailyReply(rNum, num, userId, content, answer, showReply, regDate)
		VALUES (dailyReply_seq.NEXTVAL, #{num}, #{userId}, #{content}, #{answer}, 1, SYSDATE)
	</insert>
	
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0)
		FROM dailyReply
		WHERE num=#{num} AND answer=0
			AND( showReply =1 OR (showReply =0 AND userId =#{userId} ) )
	</select>
	
	
	<select id="listReply" parameterType="map" resultType="com.forest.namu.domain.Reply">
	    SELECT r.rNum, r.userId, nickName, r.num, r.content, r.regDate, NVL(showReply, 1) showReply,
	        NVL(answerCount, 0) answerCount,
	        NVL(likeCount, 0) likeCount,
	        NVL(disLikeCount, 0) disLikeCount
	    FROM dailyReply r 
	    JOIN member m ON r.userId = m.userId
	    LEFT OUTER JOIN (
	        SELECT answer, COUNT(*) answerCount
	        FROM dailyReply
	        WHERE answer!= 0
	            AND ( showReply=1 OR ( showReply=0 AND userId=#{userId} ) )
	        GROUP BY answer
	    ) a ON r.rNum = a.answer
	    LEFT OUTER JOIN (
	        SELECT rNum, 
	               COUNT(DECODE(replyLike, 1, 1)) likeCount,
	               COUNT(DECODE(replyLike, 0, 1)) disLikeCount
	        FROM dailyReplyLike
	        GROUP BY rNum
	    ) c ON r.rNum = c.rNum
	    WHERE num=#{num} AND r.answer = 0
	        AND ( showReply=1 OR ( showReply=0 AND r.userId=#{userId} ) )
	    ORDER BY r.rNum DESC
	    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

	<delete id="deleteReply" parameterType="map">
		DELETE FROM dailyReply
		WHERE rNum=#{rNum}
		<if test="mode=='reply'">
			OR answer=#{rNum}
		</if>
	</delete>	
	
	<!-- 댓글의 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="map" resultType="com.forest.namu.domain.Reply">
		SELECT rNum, num, r.userId, nickName, r.content, r.regDate, answer, NVL(showReply,1) showReply
		FROM dailyReply r
		JOIN member m ON r.userId = m.userId
		WHERE answer = #{answer}
			AND (showReply =1 OR (showReply=0 AND r.userId =#{userId}))
		ORDER BY rNUM DESC
	</select>
	
	<!-- 좋아요/ 싫어요 -->
	<select id="replyAnswerCount" parameterType="map" resultType="Integer">
	    SELECT NVL(COUNT(*), 0)
	    FROM dailyReply
	    WHERE answer = #{answer}
	        AND (showReply = 1 OR (showReply = 0 AND userId = #{userId}))
	</select>
	
	<!-- 좋아요/ 싫어요 등록 -->
	<insert id="insertReplyLike" parameterType="map">
		INSERT INTO dailyReplyLike(rNum, userId, replyLike )
		VALUES (#{rNum}, #{userId}, #{replyLike})
	</insert>
	
	<!-- 좋아요/ 싫어요 카운드 -->
	<select id="replyLikeCount" parameterType="map" resultType="map">
		SELECT COUNT(DECODE(replyLike, 1, 1)) likeCount,
				COUNT(DECODE(replyLike, 0, 1)) disLikeCount
		FROM dailyReplyLike WHERE rNum = #{rNum}
	</select>

	<!-- 댓글 보이기/숨기기 -->
	<update id="updateReplyShowHide" parameterType="map">
		UPDATE dailyReply SET showReply = #{showReply}
		WHERE rNum = #{rNum} AND userId = #{userId}
	</update>
</mapper>